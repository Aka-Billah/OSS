import requests
from scrapy import signals
from scrapy.exceptions import IgnoreRequest


class ScrapySpiderProjectSpiderMiddleware:
    @classmethod
    def from_crawler(cls, crawler):
        s = cls()
        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)
        return s

    def process_spider_input(self, response, spider):
        # Do not alter responses by default
        return None

    def process_spider_output(self, response, result, spider):
        # Process items and requests generated by the spider
        for item_or_request in result:
            yield item_or_request

    def process_spider_exception(self, response, exception, spider):
        # Handle exceptions raised in the spider
        pass

    def process_start_requests(self, start_requests, spider):
        # Handle start requests
        for r in start_requests:
            yield r

    def spider_opened(self, spider):
        spider.logger.info("Spider opened: %s" % spider.name)


class ScrapySpiderProjectDownloaderMiddleware:
    @classmethod
    def from_crawler(cls, crawler):
        s = cls()
        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)
        return s

    def process_request(self, request, spider):
        # Default behavior: continue processing request
        return None

    def process_response(self, request, response, spider):
        # Default behavior: pass response to spider
        return response

    def process_exception(self, request, exception, spider):
        # Handle exceptions raised during request processing
        pass

    def spider_opened(self, spider):
        spider.logger.info("Spider opened: %s" % spider.name)


class ValidateURLMiddleware:
    def process_request(self, request, spider):
        """
        Validate GitHub URLs to ensure they are accessible and valid.
        """
        if "github.com" in request.url:
            try:
                # Send a HEAD request to verify the URL
                response = requests.head(request.url, timeout=5)
                if response.status_code != 200:
                    spider.logger.warning(f"Invalid GitHub URL: {request.url}")
                    raise IgnoreRequest(f"Invalid GitHub URL: {request.url}")
            except requests.RequestException as e:
                spider.logger.warning(f"Error validating URL: {request.url} - {e}")
                raise IgnoreRequest(f"Error validating URL: {request.url}")
        return None  # Continue processing if valid
